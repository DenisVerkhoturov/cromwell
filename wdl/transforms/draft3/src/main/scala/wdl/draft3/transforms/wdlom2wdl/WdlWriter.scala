package wdl.draft3.transforms.wdlom2wdl

import simulacrum.typeclass
import wdl.model.draft3.elements.CommandPartElement.{PlaceholderCommandPartElement, StringCommandPartElement}
import wdl.model.draft3.elements.ExpressionElement._
import wdl.model.draft3.elements.MetaValueElement._
import wdl.model.draft3.elements._
import wom.types._

import scala.language.implicitConversions

@typeclass
trait WdlWriter[A] {
  def toWdl(a: A): String

  // Stolen from WomGraph.scala
  def indent(s: String) = s.lines.map(x => s"  $x").mkString(System.lineSeparator)
  def combine(ss: Iterable[String]) = ss.mkString(start="", sep=System.lineSeparator, end=System.lineSeparator)
  def indentAndCombine(ss: Iterable[String]) = combine(ss.map(indent))
}

object WdlWriter {

  // Auto-generated by simulacrum
  import WdlWriter.ops._

  implicit val ifWriter: WdlWriter[IfElement] = new WdlWriter[IfElement] {
    override def toWdl(a: IfElement) = {
      s"""if (${a.conditionExpression.toWdl}) {
         |${indentAndCombine(a.graphElements.map(_.toWdl))}}""".stripMargin
    }
  }

  implicit val stringPieceWriter: WdlWriter[StringPiece] = new WdlWriter[StringPiece] {
    override def toWdl(a: StringPiece): String = a match {
      case a: StringLiteral     => a.value
      case a: StringPlaceholder => "~{" + a.expr.toWdl + "}"
    }
  }

  // Recursive references must be explicit
  implicit val expressionElementWriter: WdlWriter[ExpressionElement] = new WdlWriter[ExpressionElement] {
    override def toWdl(a: ExpressionElement) = a match {
      case a: PrimitiveLiteralExpressionElement => a.toWdl
      case a: StringExpression => "\"" + a.pieces.map(_.toWdl).mkString + "\""
      case a: StringLiteral => "\"" + a.value + "\""
      case a: ObjectLiteral =>
        "object { " + a.elements.map { pair =>
          pair._1 + ": " + expressionElementWriter.toWdl(pair._2)
        }.mkString(", ") + " }"
      case a: ArrayLiteral =>
        "[" + a.elements.map(expressionElementWriter.toWdl).mkString(", ") + "]"
      case a: MapLiteral =>
        "{ " + a.elements.map { pair =>
          expressionElementWriter.toWdl(pair._1) + ": " + expressionElementWriter.toWdl(pair._2)
        }.mkString(", ") + " }"
      case a: PairLiteral =>
        s"(${expressionElementWriter.toWdl(a.left)}, ${expressionElementWriter.toWdl(a.right)})"
      case a: UnaryOperation => a.toWdl
      case a: BinaryOperation => a.toWdl
      case a: TernaryIf =>
        s"if ${expressionElementWriter.toWdl(a.condition)} then ${expressionElementWriter.toWdl(a.ifTrue)} else ${expressionElementWriter.toWdl(a.ifFalse)}"
      case a: FunctionCallElement => a.toWdl
      case a: IdentifierLookup => a.identifier
      case a: IdentifierMemberAccess => a.toWdl
      case a: ExpressionMemberAccess => s"${expressionElementWriter.toWdl(a.expression)}.${a.memberAccessTail.toList.mkString(".")}"
      case a: IndexAccess => s"${expressionElementWriter.toWdl(a.expressionElement)}[${expressionElementWriter.toWdl(a.index)}]"
    }
  }

  implicit val unaryOperationWriter: WdlWriter[UnaryOperation] = new WdlWriter[UnaryOperation] {
    override def toWdl(a: UnaryOperation): String = a match {
      case a: LogicalNot    => s"!(${a.argument.toWdl})"
      case a: UnaryNegation => "-" + a.argument.toWdl
      case a: UnaryPlus     => "+" + a.argument.toWdl
    }
  }

  implicit val identifierMemberAccessWriter: WdlWriter[IdentifierMemberAccess] = new WdlWriter[IdentifierMemberAccess] {
    override def toWdl(a: IdentifierMemberAccess): String = {
      s"${a.first}.${a.second}" + (if (a.memberAccessTail.nonEmpty) {
        "." + a.memberAccessTail.mkString(".")
      } else {
        ""
      })
    }
  }

  implicit val binaryOperationWriter: WdlWriter[BinaryOperation] = new WdlWriter[BinaryOperation] {
    override def toWdl(a: BinaryOperation) = {
      def sandwich(opString: String) = s"${a.left.toWdl} $opString ${a.right.toWdl}"

      a match {
        case _: LogicalOr           => sandwich("||")
        case _: LogicalAnd          => sandwich("&&")
        case _: Equals              => sandwich("==")
        case _: NotEquals           => sandwich("!=")
        case _: LessThan            => sandwich("< ")
        case _: LessThanOrEquals    => sandwich("<=")
        case _: GreaterThan         => sandwich("> ")
        case _: GreaterThanOrEquals => sandwich(">=")
        case _: Add                 => sandwich("+")
        case _: Subtract            => sandwich("-")
        case _: Multiply            => sandwich("*")
        case _: Divide              => sandwich("/")
        case _: Remainder           => sandwich("%")
      }
    }
  }

  implicit val graphElementWriter: WdlWriter[WorkflowGraphElement] = new WdlWriter[WorkflowGraphElement] {
    override def toWdl(a: WorkflowGraphElement) = a match {
      case a: CallElement => a.toWdl
      case a: IntermediateValueDeclarationElement => a.toWdl
      case _: OutputDeclarationElement => ???
      case a: InputDeclarationElement => a.toWdl
      case a: IfElement => a.toWdl
      case a: ScatterElement => a.toWdl
    }
  }

  implicit val scatterElementWriter: WdlWriter[ScatterElement] = new WdlWriter[ScatterElement] {
    override def toWdl(a: ScatterElement): String =
      s"""scatter (${a.scatterVariableName} in ${a.scatterExpression.toWdl}) {
         |${indentAndCombine(a.graphElements.map(_.toWdl))}}""".stripMargin
  }

  implicit val callBodyElement: WdlWriter[CallBodyElement] = new WdlWriter[CallBodyElement] {
    override def toWdl(a: CallBodyElement): String = {
      if (a.inputs.nonEmpty) {
        s"""input:
           |${indent(indent(a.inputs.map(_.toWdl).mkString(", ")))}""".stripMargin
      } else {
        ""
      }
    }
  }

  implicit val callElementWriter: WdlWriter[CallElement] = new WdlWriter[CallElement] {
    override def toWdl(a: CallElement) = {
      val aliasExpression = a.alias match {
        case Some(alias) => s" as $alias"
        case None => ""
      }

      val bodyExpression = a.body match {
        case Some(body) =>
          s""" {
             |  ${body.toWdl}
             |}""".stripMargin
        case None => ""
      }

      s"call ${a.callableReference}$aliasExpression$bodyExpression"
    }
  }

  implicit val intermediateValueDeclarationElement: WdlWriter[IntermediateValueDeclarationElement] = new WdlWriter[IntermediateValueDeclarationElement] {
    override def toWdl(a: IntermediateValueDeclarationElement) =
      s"${a.typeElement.toWdl} ${a.name} = ${a.expression.toWdl}"
  }

  implicit val typeElementWriter: WdlWriter[TypeElement] = new WdlWriter[TypeElement] {
    override def toWdl(a: TypeElement) = a match {
      case a: PrimitiveTypeElement => a.primitiveType.toWdl
      case a: ArrayTypeElement => s"Array[${typeElementWriter.toWdl(a.inner)}]"
      case a: MapTypeElement => s"Map[${typeElementWriter.toWdl(a.keyType)}, ${typeElementWriter.toWdl(a.valueType)}]"
      case a: OptionalTypeElement => s"${typeElementWriter.toWdl(a.maybeType)}?"
      case a: NonEmptyTypeElement => s"${typeElementWriter.toWdl(a.arrayType)}+"
      case a: PairTypeElement => s"Pair[${typeElementWriter.toWdl(a.leftType)}, ${typeElementWriter.toWdl(a.rightType)}]"
      case _: ObjectTypeElement.type => "Object"
      case a: TypeAliasElement => a.alias
    }
  }

  implicit val primitiveTypeElementWriter: WdlWriter[WomPrimitiveType] = new WdlWriter[WomPrimitiveType] {
    override def toWdl(a: WomPrimitiveType) = a.toDisplayString
  }

  implicit val workflowDefinitionElementWriter: WdlWriter[WorkflowDefinitionElement] = new WdlWriter[WorkflowDefinitionElement] {
    override def toWdl(a: WorkflowDefinitionElement) = {
      val inputs = a.inputsSection match {
        case Some(i) => i.toWdl
        case None => ""
      }
      val outputs = a.outputsSection match {
        case Some(o) => o.toWdl
        case None => ""
      }

      s"""workflow ${a.name} {
         |${indent(inputs)}
         |${indentAndCombine(a.graphElements.map(_.toWdl))}
         |${indent(outputs)}
         |}""".stripMargin
    }
  }

  implicit val runtimeAttributesSectionElementWriter: WdlWriter[RuntimeAttributesSectionElement] = new WdlWriter[RuntimeAttributesSectionElement] {
    override def toWdl(a: RuntimeAttributesSectionElement): String = {
      val runtimeMap = a.runtimeAttributes map { pair =>
        s"${pair.key}: ${pair.value.toWdl}"
      }

      s"""runtime {
         |${indentAndCombine(runtimeMap)}}""".stripMargin
    }
  }

  implicit val metaValueElementWriter: WdlWriter[MetaValueElement] = new WdlWriter[MetaValueElement] {
    override def toWdl(a: MetaValueElement): String = a match {
      case _: MetaValueElementNull.type => "null"
      case a: MetaValueElementBoolean => a.value.toString
      case a: MetaValueElementFloat => a.value.toString
      case a: MetaValueElementInteger => a.value.toString
      case a: MetaValueElementString => "\"" + a.value + "\""
      case a: MetaValueElementObject =>
        "{" + a.value.map { pair =>
          s"${pair._1}: ${metaValueElementWriter.toWdl(pair._2)}"
        }.mkString(", ") + "}"
      case a: MetaValueElementArray => "[" + a.value.map(metaValueElementWriter.toWdl).mkString(", ") + "]"
    }
  }


  implicit val metaSectionElementWriter: WdlWriter[MetaSectionElement] = new WdlWriter[MetaSectionElement] {
    override def toWdl(a: MetaSectionElement): String = {
      val map = a.meta.map { pair =>
        s"${pair._1}: ${pair._2.toWdl}"
      }
      s"""meta {
         |${indentAndCombine(map)}
         |}""".stripMargin
    }
  }

  implicit val parameterMetaSectionElementWriter: WdlWriter[ParameterMetaSectionElement] = new WdlWriter[ParameterMetaSectionElement] {
    override def toWdl(a: ParameterMetaSectionElement): String = {
      val map = a.metaAttributes.map { pair =>
        s"${pair._1}: ${pair._2.toWdl}"
      }
      s"""parameter_meta {
         |${indentAndCombine(map)}
         |}""".stripMargin
    }
  }

  implicit val taskDefinitionTypeElementWriter: WdlWriter[TaskDefinitionElement] = new WdlWriter[TaskDefinitionElement] {
    override def toWdl(a: TaskDefinitionElement) = {
      val inputs = a.inputsSection match {
        case Some(i) => i.toWdl
        case None => ""
      }
      val outputs = a.outputsSection match {
        case Some(o) => o.toWdl
        case None => ""
      }
      val runtime = a.runtimeSection match {
        case Some(r) => r.toWdl
        case None => ""
      }
      val meta = a.metaSection match {
        case Some(m) => m.toWdl
        case None => ""
      }
      val parameterMeta = a.parameterMetaSection match {
        case Some(p) => p.toWdl
        case None => ""
      }

      s"""task ${a.name} {
         |${indent(inputs)}
         |${indentAndCombine(a.declarations.map(_.toWdl))}
         |${indent(outputs)}
         |${indent(a.commandSection.toWdl)}
         |${indent(runtime)}
         |${indent(meta)}
         |${indent(parameterMeta)}
         |}""".stripMargin
    }
  }

  implicit val commandSectionElementWriter: WdlWriter[CommandSectionElement] = new WdlWriter[CommandSectionElement] {
    override def toWdl(a: CommandSectionElement): String = {
      s"""command {
         |${indentAndCombine(a.parts.map(_.toWdl))}}""".stripMargin
    }
  }

  implicit val commandSectionLineWriter: WdlWriter[CommandSectionLine] = new WdlWriter[CommandSectionLine] {
    override def toWdl(a: CommandSectionLine): String = {
      a.parts.map(_.toWdl).mkString
    }
  }

  implicit val commandPartElementWriter: WdlWriter[CommandPartElement] = new WdlWriter[CommandPartElement] {
    override def toWdl(a: CommandPartElement): String = a match {
      case a: StringCommandPartElement => a.value // .trim?
      case a: PlaceholderCommandPartElement =>
        val attributes = a.attributes.toWdl

        if (attributes.nonEmpty)
          s"~{$attributes ${a.expressionElement.toWdl}}"
        else
          s"~{${a.expressionElement.toWdl}}"
    }
  }

  implicit val placeholderAttributeSetWriter: WdlWriter[PlaceholderAttributeSet] = new WdlWriter[PlaceholderAttributeSet] {
    override def toWdl(a: PlaceholderAttributeSet): String = {
      Map(
        "sep" -> a.sepAttribute,
        "true" -> a.trueAttribute,
        "false" -> a.falseAttribute,
        "default" -> a.defaultAttribute
      ).map({ case (attrKey: String, maybeValue: Option[String]) =>
        maybeValue match {
          case Some(value) => attrKey + "=\"" + value + "\""
          case None => ""
        }
      }).filterNot(_.length == 0).mkString(sep = " ")
    }
  }

  implicit val inputsSectionElementWriter: WdlWriter[InputsSectionElement] = new WdlWriter[InputsSectionElement] {
    override def toWdl(a: InputsSectionElement): String = {
      s"""input {
         |${indentAndCombine(a.inputDeclarations.map(_.toWdl))}}""".stripMargin
    }
  }

  implicit val inputDeclarationElementWriter: WdlWriter[InputDeclarationElement] = new WdlWriter[InputDeclarationElement] {
    override def toWdl(a: InputDeclarationElement): String = {
      val expression = a.expression match {
        case Some(expr) => s" = ${expr.toWdl}"
        case None => ""
      }

      s"${a.typeElement.toWdl} ${a.name}$expression"
    }
  }

  implicit val outputsSectionElementWriter: WdlWriter[OutputsSectionElement] = new WdlWriter[OutputsSectionElement] {
    override def toWdl(a: OutputsSectionElement): String = {
      s"""output {
         |${indentAndCombine(a.outputs.map(_.toWdl))}}""".stripMargin
    }
  }

  implicit val outputDeclarationElementWriter: WdlWriter[OutputDeclarationElement] = new WdlWriter[OutputDeclarationElement] {
    override def toWdl(a: OutputDeclarationElement): String = {
      s"${a.typeElement.toWdl} ${a.name} = ${a.expression.toWdl}"
    }
  }

  implicit val functionCallElementWriter: WdlWriter[FunctionCallElement] = new WdlWriter[FunctionCallElement] {
    override def toWdl(a: FunctionCallElement): String = a match {
      case _: StdoutElement.type => "stdout()"
      case _: StderrElement.type => "stderr()"
      case a: OneParamFunctionCallElement => a.toWdl
      case a: OneOrTwoParamFunctionCallElement => a.toWdl
      case a: TwoParamFunctionCallElement => a.toWdl
      case a: Sub => s"sub(${a.input.toWdl}, ${a.pattern.toWdl}, ${a.replace.toWdl})"
    }
  }

  implicit val oneParamFunctionCallElementWriter: WdlWriter[OneParamFunctionCallElement] = new WdlWriter[OneParamFunctionCallElement] {
    override def toWdl(a: OneParamFunctionCallElement): String = {
      def functionCall(name: String) = s"$name(${a.param.toWdl})"

      a match {
        case _: ReadLines =>    functionCall("read_lines")
        case _: ReadTsv =>      functionCall("read_tsv")
        case _: ReadMap =>      functionCall("read_map")
        case _: ReadObject =>   functionCall("read_object")
        case _: ReadObjects =>  functionCall("read_objects")
        case _: ReadJson =>     functionCall("read_json")
        case _: ReadInt =>      functionCall("read_int")
        case _: ReadString =>   functionCall("read_string")
        case _: ReadFloat =>    functionCall("read_float")
        case _: ReadBoolean =>  functionCall("read_boolean")
        case _: WriteLines =>   functionCall("write_lines")
        case _: WriteTsv =>     functionCall("write_tsv")
        case _: WriteMap =>     functionCall("write_map")
        case _: WriteObject =>  functionCall("write_object")
        case _: WriteObjects => functionCall("write_objects")
        case _: WriteJson =>    functionCall("write_json")
        case _: Range =>        functionCall("range")
        case _: Transpose =>    functionCall("transpose")
        case _: Length =>       functionCall("length")
        case _: Flatten =>      functionCall("flatten")
        case _: SelectFirst =>  functionCall("select_first")
        case _: SelectAll =>    functionCall("select_all")
        case _: Defined =>      functionCall("defined")
        case _: Floor =>        functionCall("floor")
        case _: Ceil =>         functionCall("ceil")
        case _: Round =>        functionCall("round")
        case _: Glob =>         functionCall("glob")
      }
    }
  }

  implicit val oneOrTwoParamFunctionCallElementWriter: WdlWriter[OneOrTwoParamFunctionCallElement] = new WdlWriter[OneOrTwoParamFunctionCallElement] {
    override def toWdl(a: OneOrTwoParamFunctionCallElement): String = {
      (a, a.secondParam) match {
        case (_: Size, Some(unit)) => s"size(${a.firstParam.toWdl}, ${unit.toWdl})"
        case (_: Size, None) => s"size(${a.firstParam.toWdl})"
        case (_: Basename, Some(suffix)) => s"basename(${a.firstParam.toWdl}, ${suffix.toWdl})"
        case (_: Basename, None) => s"basename(${a.firstParam.toWdl})"
      }
    }
  }

  implicit val twoParamFunctionCallElementWriter: WdlWriter[TwoParamFunctionCallElement] = new WdlWriter[TwoParamFunctionCallElement] {
    override def toWdl(a: TwoParamFunctionCallElement): String = {
      def functionCall(name: String) = s"$name(${a.arg1.toWdl}, ${a.arg2.toWdl})"

      a match {
        case _: Zip => functionCall("zip")
        case _: Cross => functionCall("cross")
        case _: Prefix => functionCall("prefix")
      }
    }
  }

  implicit val structElementWriter: WdlWriter[StructElement] = new WdlWriter[StructElement] {
    override def toWdl(a: StructElement): String =
      s"""struct ${a.name} {
         |${indentAndCombine(a.entries.map(_.toWdl))}}""".stripMargin
  }

  implicit val structEntryElementWriter: WdlWriter[StructEntryElement] = new WdlWriter[StructEntryElement] {
    override def toWdl(a: StructEntryElement): String = s"${a.typeElement.toWdl} ${a.identifier}"
  }

  implicit val fileElementWriter: WdlWriter[FileElement] = new WdlWriter[FileElement] {
    override def toWdl(a: FileElement) = {
      "version draft-3\n" +
      combine(a.structs.map(_.toWdl)) +
      combine(a.tasks.map(_.toWdl)) +
      combine(a.workflows.map(_.toWdl))
    }
  }

  implicit val kvPairWriter: WdlWriter[KvPair] = new WdlWriter[KvPair] {
    override def toWdl(a: KvPair): String = s"${a.key} = ${a.value.toWdl}"
  }

  implicit val primitiveLiteralExpressionElementWriter: WdlWriter[PrimitiveLiteralExpressionElement] = new WdlWriter[PrimitiveLiteralExpressionElement] {
    override def toWdl(a: PrimitiveLiteralExpressionElement) = a.value.toWomString
  }
}
