package wdl.draft3.transforms.ast2wdl

import simulacrum.typeclass
import wdl.model.draft3.elements.ExpressionElement._
import wdl.model.draft3.elements._
import wom.types._
import wom.values.{WomBoolean, WomEnumerationValue, WomFile, WomFloat, WomInteger, WomLong, WomString}

import scala.language.implicitConversions

@typeclass
trait WdlWriter[A] {
  def toWdl(a: A): String
}

object WdlWriter {

  // Auto-generated by simulacrum
  import WdlWriter.ops._

  implicit val ifWriter: WdlWriter[IfElement] = new WdlWriter[IfElement] {
    def toWdl(a: IfElement) = {
      s"""if (${a.conditionExpression.toWdl}) {
         |  ${a.graphElements.map(_.toWdl).mkString("\n")}
         |}
       """.stripMargin
    }
  }

  implicit val expressionWriter: WdlWriter[ExpressionElement] = new WdlWriter[ExpressionElement] {
    def toWdl(a: ExpressionElement) = a match {
      case a: PrimitiveLiteralExpressionElement => a.toWdl
      case _: StringExpression => ???
      case a: StringLiteral => a.value
      case _: ObjectLiteral => ???
      case _: ArrayLiteral => ???
      case _: MapLiteral => ???
      case _: PairLiteral => ???
      case _: UnaryOperation => ???
      case a: BinaryOperation => a.toWdl
      case _: TernaryIf => ???
      case _: FunctionCallElement => ???
      case a: IdentifierLookup => a.identifier
      case _: IdentifierMemberAccess => ???
      case _: ExpressionMemberAccess => ???
      case _: IndexAccess => ???
    }
  }

  implicit val binaryOperationWriter: WdlWriter[BinaryOperation] = new WdlWriter[BinaryOperation] {
    def toWdl(a: BinaryOperation) = {
      def sandwich(opString: String) = s"${a.left.toWdl} $opString ${a.right.toWdl}"

      a match {
        case _: LogicalOr           => sandwich("||")
        case _: LogicalAnd          => sandwich("&&")
        case _: Equals              => sandwich("==")
        case _: NotEquals           => sandwich("!=")
        case _: LessThan            => sandwich("< ")
        case _: LessThanOrEquals    => sandwich("<=")
        case _: GreaterThan         => sandwich("> ")
        case _: GreaterThanOrEquals => sandwich(">=")
        case _: Add                 => sandwich("+")
        case _: Subtract            => sandwich("-")
        case _: Multiply            => sandwich("*")
        case _: Divide              => sandwich("/")
        case _: Remainder           => sandwich("%")
      }
    }
  }

  implicit val graphElementWriter: WdlWriter[WorkflowGraphElement] = new WdlWriter[WorkflowGraphElement] {
    def toWdl(a: WorkflowGraphElement) = a match {
      case a: CallElement => a.toWdl
      case a: IntermediateValueDeclarationElement => a.toWdl
      case _: OutputDeclarationElement => ???
      case _: InputDeclarationElement => ???
      case a: IfElement => a.toWdl
      case _: ScatterElement => ???
    }
  }

  implicit val callBodyElement: WdlWriter[CallBodyElement] = new WdlWriter[CallBodyElement] {
    def toWdl(a: CallBodyElement): String = {
      if (a.inputs.nonEmpty) {
        s"""input:
           |  ${a.inputs.map(_.toWdl).mkString(",\n")}
         """.stripMargin
      } else {
        ""
      }
    }
  }

  implicit val callElementWriter: WdlWriter[CallElement] = new WdlWriter[CallElement] {
    def toWdl(a: CallElement) = {
      val aliasExpression = a.alias match {
        case Some(alias) => s" as $alias"
        case None => ""
      }

      val bodyExpression = a.body match {
        case Some(body) => body.toWdl
        case None => ""
      }

      s"""call ${a.callableName}$aliasExpression {
         |  $bodyExpression
         |}
       """.stripMargin
    }
  }

  implicit val intermediateValueDeclarationElement: WdlWriter[IntermediateValueDeclarationElement] = new WdlWriter[IntermediateValueDeclarationElement] {
    def toWdl(a: IntermediateValueDeclarationElement) =
      s"${a.typeElement.toWdl} ${a.name} = ${a.expression.toWdl}"
  }

  implicit val typeElementWriter: WdlWriter[TypeElement] = new WdlWriter[TypeElement] {
    def toWdl(a: TypeElement) = a match {
      case a: PrimitiveTypeElement => a.primitiveType.toWdl
      case _: ArrayTypeElement => ???
      case _: MapTypeElement => ???
      case _: OptionalTypeElement => ???
      case _: NonEmptyTypeElement => ???
      case _: PairTypeElement => ???
      case _: ObjectTypeElement.type => ???
      case _: TypeAliasElement => ???
    }
  }

  implicit val primitiveTypeElementWriter: WdlWriter[WomPrimitiveType] = new WdlWriter[WomPrimitiveType] {
    def toWdl(a: WomPrimitiveType) = a.toDisplayString
  }

  implicit val workflowDefinitionElementWriter: WdlWriter[WorkflowDefinitionElement] = new WdlWriter[WorkflowDefinitionElement] {
    def toWdl(a: WorkflowDefinitionElement) = {
      s"""workflow ${a.name} {
         |  ${a.graphElements.map(_.toWdl).mkString("\n")}
         |}
       """.stripMargin
    }
  }

  implicit val taskDefinitionTypeElementWriter: WdlWriter[TaskDefinitionElement] = new WdlWriter[TaskDefinitionElement] {
    def toWdl(a: TaskDefinitionElement) = {
      s"""task ${a.name} {
         |  ${a.declarations.map(_.toWdl).mkString("\n")}
         |}
       """.stripMargin
    }
  }

  implicit val fileElementWriter: WdlWriter[FileElement] = new WdlWriter[FileElement] {
    def toWdl(a: FileElement) = {
      a.workflows.map(_.toWdl).mkString("\n") +
      "\n" +
      a.tasks.map(_.toWdl).mkString("\n")
    }
  }

  implicit val kvPairWriter: WdlWriter[KvPair] = new WdlWriter[KvPair] {
    def toWdl(a: KvPair): String = s"${a.key} = ${a.value.toWdl}"
  }

  implicit val primitiveLiteralExpressionElementWriter: WdlWriter[PrimitiveLiteralExpressionElement] = new WdlWriter[PrimitiveLiteralExpressionElement] {
    def toWdl(a: PrimitiveLiteralExpressionElement) = a.value match {
      case a: WomBoolean => a.value.toString
      case _: WomEnumerationValue => ???
      case _: WomFile => ???
      case _: WomFloat => ???
      case a: WomInteger => a.value.toString
      case _: WomLong => ???
      case a: WomString => a.value
    }
  }
}
